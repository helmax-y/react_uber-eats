{"version":3,"sources":["store/dataFromServer.js","store/index.js","components/RestaurantCard/index.js","components/MainPage/index.js","API/loadData.js","index.js"],"names":["ACTION_TYPES","dataFromServerReducer","dataFromServer","arguments","length","undefined","action","type","payload","getRestaurants","store","feedItems","storesMap","map","_ref","uuid","rootReducer","combineReducers","createStore","applyMiddleware","thunk","RestaurantCard","image","title","categories","time","react_default","a","createElement","className","src","alt","join","replace","mapDispatch2Props","loadData","dispatch","fetch","then","response","json","data","connect","state","restaurants","useEffect","_ref2","heroImageUrl","text","etaRange","components_RestaurantCard","key","ReactDOM","render","es","components_MainPage","document","getElementById"],"mappings":"8OAAMA,eACkB,wBAkBTC,EAVe,WAAmC,IAAlCC,EAAkCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjB,KAAMG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/D,OAAQC,EAAOC,MACb,KAAKP,EACH,OAAOM,EAAOE,QAEhB,QACE,OAAON,mBCXAO,EAAiB,SAACC,GAAU,IAC/BR,EAAmBQ,EAAnBR,eAER,IAAKA,EACH,MAAO,GAJ8B,IAO/BS,EAAyBT,EAAzBS,UAAWC,EAAcV,EAAdU,UAEnB,OAAOD,EAAUE,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OAAcH,EAAUG,MAGzCC,EAAcC,YAAgB,CAClCf,eAAgBD,IAGHiB,cAAYF,EAAaG,YAAgBC,MCGzCC,SAlBQ,SAAAP,GAAA,IACrBQ,EADqBR,EACrBQ,MACAC,EAFqBT,EAErBS,MACAC,EAHqBV,EAGrBU,WACAC,EAJqBX,EAIrBW,KAJqB,OAMrBC,EAAAC,EAAAC,cAAA,WAASC,UAAU,QACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,IAAKR,EAAOS,IAAKR,IAC9CG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeN,GAC7BG,EAAAC,EAAAC,cAAA,WAASC,UAAU,oBAChBL,EAAWQ,KAAK,aAEnBN,EAAAC,EAAAC,cAAA,WAASC,UAAU,QAChBJ,EAAKQ,QAAQ,SAAK,gBCsBnBC,EAAoB,CACxBC,SCrCkC,kBAAM,SAACC,GACzCC,MAHU,+DAIPC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIL,GJH2B5B,EIGYiC,EAAKA,KJHL,CACvDlC,KAAMP,EACNQ,aAF2C,IAAAA,OGwC9BkC,cARQ,SAAAC,GAAK,MAAK,CAC/BC,YAAanC,EAAekC,KAOST,EAAxBQ,CAlCE,SAAA5B,GAA+B,IAA5BqB,EAA4BrB,EAA5BqB,SAAUS,EAAkB9B,EAAlB8B,YAK5B,OAJAC,oBAAU,WACRV,MAIAT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACbe,EAAY/B,IAAI,SAAAiC,GAAA,IACf/B,EADe+B,EACf/B,KACAgC,EAFeD,EAEfC,aACAxB,EAHeuB,EAGfvB,MACAC,EAJesB,EAIftB,WACYwB,EALGF,EAKfG,SAAYD,KALG,OAOftB,EAAAC,EAAAC,cAACsB,EAAD,CACEC,IAAKpC,EACLO,MAAOyB,EACPxB,MAAOA,EACPC,WAAYA,EACZC,KAAMuB,SEvBhBI,IAASC,OACP3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAU5C,MAAOA,GACfgB,EAAAC,EAAAC,cAAC2B,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.a681f7cc.chunk.js","sourcesContent":["const ACTION_TYPES = {\n  SET_DATA_FROM_SERVER: 'SET_DATA_FROM_SERVER',\n};\n\nexport const createActionSetDataFromServer = payload => ({\n  type: ACTION_TYPES.SET_DATA_FROM_SERVER,\n  payload,\n});\n\nconst dataFromServerReducer = (dataFromServer = null, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.SET_DATA_FROM_SERVER:\n      return action.payload;\n\n    default:\n      return dataFromServer;\n  }\n};\n\nexport default dataFromServerReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport dataFromServerReducer from './dataFromServer';\n\nexport const getRestaurants = (store) => {\n  const { dataFromServer } = store;\n\n  if (!dataFromServer) {\n    return [];\n  }\n\n  const { feedItems, storesMap } = dataFromServer;\n\n  return feedItems.map(({ uuid }) => storesMap[uuid]);\n};\n\nconst rootReducer = combineReducers({\n  dataFromServer: dataFromServerReducer,\n});\n\nexport default createStore(rootReducer, applyMiddleware(thunk));\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './RestaurantCard.scss';\n\nconst RestaurantCard = ({\n  image,\n  title,\n  categories,\n  time,\n}) => (\n  <article className=\"card\">\n    <img className=\"card__image\" src={image} alt={title} />\n    <h2 className=\"card__title\">{title}</h2>\n    <section className=\"card__categories\">\n      {categories.join(' • ')}\n    </section>\n    <section className=\"time\">\n      {time.replace('–', ' – ')}\n    </section>\n  </article>\n);\n\nexport default RestaurantCard;\n\nRestaurantCard.propTypes = {\n  image: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  categories: PropTypes.arrayOf(PropTypes.string).isRequired,\n  time: PropTypes.string.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport '../../styles/index.scss';\nimport './MainPage.scss';\nimport { createActionLoadData } from '../../API/loadData';\nimport { getRestaurants } from '../../store';\nimport RestaurantCard from '../RestaurantCard';\n\nconst MainPage = ({ loadData, restaurants }) => {\n  useEffect(() => {\n    loadData();\n  });\n\n  return (\n    <main className=\"main\">\n      {restaurants.map(({\n        uuid,\n        heroImageUrl,\n        title,\n        categories,\n        etaRange: { text },\n      }) => (\n        <RestaurantCard\n          key={uuid}\n          image={heroImageUrl}\n          title={title}\n          categories={categories}\n          time={text}\n        />\n      ))}\n    </main>\n  );\n};\n\nconst mapState2Props = state => ({\n  restaurants: getRestaurants(state),\n});\n\nconst mapDispatch2Props = {\n  loadData: createActionLoadData,\n};\n\nexport default connect(mapState2Props, mapDispatch2Props)(MainPage);\n\nMainPage.propTypes = {\n  loadData: PropTypes.func.isRequired,\n  restaurants: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import { createActionSetDataFromServer } from '../store/dataFromServer';\n\nconst URL = 'https://mate-uber-eats-api.herokuapp.com/api/v1/restaurants';\n\nexport const createActionLoadData = () => (dispatch) => {\n  fetch(URL)\n    .then(response => response.json())\n    .then(data => dispatch(createActionSetDataFromServer(data.data)));\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport MainPage from './components/MainPage';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <MainPage />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}